alfa <- zipf1.lm$coefficients[2]
plot(freq.sb$centers, freq.sb$stats[2,], log="xy", xlab = "ranga r",
ylab = "czestoc f", pch = 19, cex = 1.2,
main = substitute(paste("Rangowe prawo Zipfa ", alpha,"=",a),list(a = round(alfa, 2))))
lines(ranks.scale, exp(A) * ranks.scale ** alfa, col = "red", lty = 2, lwd = 2)
summary(zipf1.lm)
freqs.scale <- with(data, seq(min(freq), max(freq), length.out = 20))
freqs.scale <- log.scale(freqs.scale, 20)
h <- hist(data$freq, breaks = freqs.scale, plot = FALSE)
freq.lm <- lm(log(h$density) ~ log(h$mids))
summary(freq.lm)
A <- freq.lm$coefficients[1]
alfa <- freq.lm$coefficients[2]
plot(h$mids, h$density, log="xy", xlab = "czestosc f", ylab = "P(f)",
pch = 19, cex = 1.2,
main = substitute(paste("Czestosciowe prawo Zipfa ", alpha,"=",a),list(a = round(alfa, 2))))
lines(freqs.scale, exp(A) * freqs.scale ** alfa, col = "red", lty = 2, lwd = 2)
verne_heaps <- v %>%
unnest_tokens(word, text) %>%
group_by(title) %>%
mutate(M = row_number(), V = cumsum(!duplicated(word)))
verne_heaps
verne_sum <- verne_heaps %>%
summarise(a = lm(log10(V) ~ log10(M))$coefficients[1], b = lm(log10(V) ~ log10(M))$coefficients[2])
verne_sum
ggplot(verne_heaps, aes(M, V, color = title)) +
geom_line() +
geom_abline(data = verne_sum, aes(intercept = a, slope = b, color = title), linetype = "dashed") +
theme(legend.position = "bottom") +
scale_x_log10() + scale_y_log10() +
facet_grid(~title)
<-
make.lm <- function(data, threshold) {
data %>%
filter(M > 10 & M < threshold) %>%
summarise(th = threshold, A = lm(log(V) ~ log(M))$coefficients[1], beta = lm(log(V) ~ log(M))$coefficients[2])
}
threshold <- seq(100, 20000, 100)
lm.res <- do.call(rbind, lapply(threshold, make.lm, data = verne_heaps))
lm.res
ggplot(lm.res) +
geom_line(aes(th, beta, color = title)) +
theme(legend.position = "bottom") +
facet_grid(~title)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
View(verne_fr_books)
verne_fr_books <- g[g$gutenberg_id %in% c(799, 800, 4548, 4717, 4791, 5081, 5126)]
verne_fr_books <- g[g$gutenberg_id %in% c(799, 800, 4548, 4717, 4791, 5081, 5126),]
View(verne_fr_books)
verne_fr_books <- g[g$gutenberg_id %in% c(83, 103, 3526, 4717, 4791, 5081, 5126),]
View(verne_fr_books)
verne_fr_books <- verne_fr[verne_fr$gutenberg_id %in% c(83, 103, 3526, 4717, 4791, 5081, 5126),]
View(verne_fr_books)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
View(verne_en)
View(verne_en_books)
View(verne_fr_books)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
verne_fr_books[match(verne_fr_ids, verne_fr_books$gutenberg_id),]
verne_en_books <-verne_fr_books[match(verne_fr_ids, verne_fr_books$gutenberg_id),]
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
View(verne_fr_books)
View(verne_en_books)
View(verne_en_books)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
View(verne_fr_books)
View(verne_en_books)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
View(verne_fr_books)
View(verne_en_books)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
v <- gutenberg_download(c(verne_en_ids,verne_fr_ids))
View(v)
v %<>% left_join(rbind(verne_en_books, verne_fr_books)) %>%
mutate(gutenberg_id = NULL)
View(v)
v <- gutenberg_download(c(verne_en_ids,verne_fr_ids))
v1 %<>% left_join(rbind(verne_en_books, verne_fr_books)) %>%
mutate()
v1 %<>% left_join(rbind(verne_en_books, verne_fr_books))
v1 <- left_join(v, rbind(verne_en_books, verne_fr_books))
View(v1)
v %<>% left_join(v, rbind(verne_en_books, verne_fr_books))
library(magrittr)
v %<>% left_join(v, rbind(verne_en_books, verne_fr_books))
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
library(gutenbergr)
library(gridExtra)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tidytext)
library(magrittr)
rm(list = ls())
g <- gutenberg_works()
verne_en <- gutenberg_works(languages = "en") %>%
filter(author == "Verne, Jules")
verne_fr <- gutenberg_works(languages = "fr") %>%
filter(author == "Verne, Jules")
verne_fr_ids <- c(799, 800, 4548, 4717, 4791, 5081, 5126, 7442, 11927, 14163)
verne_fr_books <- verne_fr[verne_fr$gutenberg_id %in% verne_fr_ids,c("gutenberg_id","title")]
verne_en_ids <- c(83, 103, 3526, 16457, 3748, 1355, 3808, 1842, 29413, 2083)
verne_en_books <- verne_en[verne_en$gutenberg_id %in% verne_en_ids,c("gutenberg_id","title")]
verne_fr_books <-verne_fr_books[match(verne_fr_ids, verne_fr_books$gutenberg_id),]
verne_en_books <-verne_en_books[match(verne_en_ids, verne_en_books$gutenberg_id),]
v <- gutenberg_download(c(verne_en_ids,verne_fr_ids))
v <- left_join(v, rbind(verne_en_books, verne_fr_books))
View(v)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
v
View(v)
verne_heaps <- v %>%
unnest_tokens(word, text) %>%
group_by(title) %>%
mutate(M = row_number(), V = cumsum(!duplicated(word)))
verne_heaps
View(verne_heaps)
verne_sum <- verne_heaps %>%
summarise(a = lm(log10(V) ~ log10(M))$coefficients[1], b = lm(log10(V) ~ log10(M))$coefficients[2])
verne_sum
View(verne_sum)
View(v)
View(verne_fr)
verne_sum_ <- left_join(verne_sum, rbind(verne_en_books, verne_fr_books))
View(verne_sum_)
verne_sum <- left_join(verne_sum, rbind(verne_en_books, verne_fr_books))
View(verne_sum)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
View(verne_sum)
verne_sum[verne_sum$gutenberg_id %in% verne_en_ids]
verne_sum[verne_sum$gutenberg_id %in% verne_en_ids,]
verne_sum[verne_sum$gutenberg_id %in% verne_fr_ids,]
verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),]
verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),]
verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),b]
verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),"b"]
df <- data.frame(b_en = verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),"b"],
b_fr = verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),"b"])
View(df)
b_en <- verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),"b"]
b_fr <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),"b"]
df <- data.frame(b_en, b_fr)
b_en <- verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),"b"]$b
b_fr <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),"b"]$b
df <- data.frame(b_en, b_fr)
b_fr <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id)]$b
b_fr <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),]$b
b_en <- verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),]$b
df <- data.frame(b_en, b_fr)
View(verne_sum)
b_en_error <- verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),]$b_error
b_fr_erro <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),]$b_error
df <- data.frame(b_en, b_en_error, b_fr, b_fr_erro)
b_fr_error <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),]$b_error
df <- data.frame(b_en, b_en_error, b_fr, b_fr_erro)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) + geom_pointrange(aes(ymin=len-sd, ymax=len+sd))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) + geom_pointrange(aes(ymin=b_fr-b_fr_erro, ymax=b_fr+b_fr_erro))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) + geom_pointrange(aes(ymin=b_fr-b_fr_erro, ymax=b_fr+b_fr_erro,
xmin=b_en-b_en_error, xmax=b_en+b_en_error))
plot(g1)
g1 + xlab("cross similarity")
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_erro, ymax=b_fr+b_fr_erro,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle","+ cross"))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_erro, ymax=b_fr+b_fr_erro,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32))
plot(g1)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
df <- data.frame(b_en, b_en_error, b_fr, b_fr_error)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_erro, ymax=b_fr+b_fr_erro,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_erro, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32))
plot(g1)
b_fr_error <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),]$b_error
df <- data.frame(b_en, b_en_error, b_fr, b_fr_error)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32))
plot(g1)
cor.test(df$b_en, df$b_fr)
?cor.test
cor.test(df$b_en, df$b_fr)$p.value
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32, ", p:", cor.test(df$b_en, df$b_fr)$p.value))
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32, ", p:", cor.test(df$b_en, df$b_fr)$p.value))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32, ", p:", round(cor.test(df$b_en, df$b_fr)$p.value)))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32, ", p:", round(cor.test(df$b_en, df$b_fr)$p.value), 4))
plot(g1)
?round
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", 32, ", p:", round(cor.test(df$b_en, df$b_fr)$p.value), 6))
plot(g1)
cor.test(df$b_en, df$b_fr)$p.value
?cor.test
cor.test(df$b_en, df$b_fr)$statistic
cor.test(df$b_en, df$b_fr)$estimate
cor.test(df$b_en, df$b_fr)$estimate[1]
cor.test(df$b_en, df$b_fr)$estimate
round(cor.test(df$b_en, df$b_fr)$estimate)
round(cor.test(df$b_en, df$b_fr)$estimate, 2)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", round(cor.test(df$b_en, df$b_fr)$estimate, 2), ", p:", round(cor.test(df$b_en, df$b_fr)$p.value), 6))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", round(cor.test(df$b_en, df$b_fr)$estimate, 2), ", p:", round(cor.test(df$b_en, df$b_fr)$p.value, 4)))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", round(cor.test(df$b_en, df$b_fr)$estimate, 2), ", p:", round(cor.test(df$b_en, df$b_fr)$p.value, 3)))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, corr:", round(cor.test(df$b_en, df$b_fr)$estimate, 2), ", p-value:", round(cor.test(df$b_en, df$b_fr)$p.value, 3)))
plot(g1)
g1 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) + ggtitle(paste("Non-shuffle, cor:", round(cor.test(df$b_en, df$b_fr)$estimate, 2), ", p-value:", round(cor.test(df$b_en, df$b_fr)$p.value, 3)))
plot(g1)
cor.test(df$b_en, df$b_fr)
View(verne_heaps)
sample(verne_heaps$word)
View(v)
v %>%
unnest_tokens(word, text)
v %>%
unnest_tokens(word, text)%>%
group_by(title)
v %>%
split(.$gutenberg_id) %>%
.[sample(names(.))] %>%
bind_rows
v1 <- v %>%
split(.$gutenberg_id) %>%
.[sample(names(.))] %>%
bind_rows
View(v1)
v1 <- v %>%
split(.$gutenberg_id) %>%
.[sample(word(.))] %>%
bind_rows
print(x)
for (x in verne_fr_ids) {
print(x)
}
v1 <- data.frame(v)
v1 <- v %>%
unnest_tokens(word, text)%>%
group_by(title)
v1[v1$gutenberg_id == id, "word"] = sample(v1$word)
v1[v1$gutenberg_id == 799, "word"]
sample(v1[v1$gutenberg_id == 799, "word"])
sample(v1[v1$gutenberg_id == 799, "word"])
sample(v1[v1$gutenberg_id == 799, "word"])
sample(v1[v1$gutenberg_id == 799]$word)
sample(v1[v1$gutenberg_id == 799, ]$word)
v1[v1$gutenberg_id == id, "word"] = sample(v1[v1$gutenberg_id == id, ]$word)
print(id)
for (id in verne_fr_ids) {
print(id)
}
for (id in verne_fr_ids) {
v1[v1$gutenberg_id == id, "word"] = sample(v1[v1$gutenberg_id == id, ]$word)
}
for (id in verne_en_ids) {
v1[v1$gutenberg_id == id, "word"] = sample(v1[v1$gutenberg_id == id, ]$word)
}
verne_heaps <- v1 %>%
mutate(M = row_number(), V = cumsum(!duplicated(word)))
View(verne_heaps)
verne_sum <- verne_heaps %>%
summarise(a = lm(log10(V) ~ log10(M))$coefficients[1], a_error = summary(lm(log10(V) ~ log10(M)))$coefficients[1,2],
b = lm(log10(V) ~ log10(M))$coefficients[2], b_error = summary(lm(log10(V) ~ log10(M)))$coefficients[2,2])
verne_sum <- left_join(verne_sum, rbind(verne_en_books, verne_fr_books))
b_en <- verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),]$b
b_fr <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),]$b
b_en_error <- verne_sum[match(verne_en_ids, verne_sum$gutenberg_id),]$b_error
b_fr_error <- verne_sum[match(verne_fr_ids, verne_sum$gutenberg_id),]$b_error
df <- data.frame(b_en, b_en_error, b_fr, b_fr_error)
g2 <- ggplot(df, aes(x=b_en, y=b_fr)) +
geom_pointrange(aes(ymin=b_fr-b_fr_error, ymax=b_fr+b_fr_error,
xmin=b_en-b_en_error, xmax=b_en+b_en_error)) +
ggtitle(paste("Shuffle, cor:", round(cor.test(df$b_en, df$b_fr)$estimate, 2),
", p-value:", round(cor.test(df$b_en, df$b_fr)$p.value, 3)))
plot(g2)
g <- grid.arrange(g1,g2, ncol=2, nrow=1, left = "TF-IDF/TF", top = "cross/cosinus")
g <- grid.arrange(g1,g2, ncol=1, nrow=2, left = "TF-IDF/TF", top = "cross/cosinus")
g <- grid.arrange(g1,g2, ncol=1, nrow=2)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad3/zad3.R")
nrc <- get_sentiments("nrc")
library(gutenbergr)
library(dplyr)
library(magrittr)
library(tidytext)
library(tidyr)
library(ggplot2)
nrc <- get_sentiments("nrc")
2
options(timeout=1000000)
nrc <- get_sentiments("nrc")
table(nrc$sentiment)
nrc <- get_sentiments("nrc")
table(nrc$sentiment)
nrc <- get_sentiments("nrc")
nrc <- get_sentiments("nrc")
library(remotes)
install.packages("remotes")
library(remotes)
install_github("EmilHvitfeldt/textdata")
install_github("juliasilge/tidytext")
nrc <- get_sentiments("nrc")
library(remotes)
install_github("juliasilge/tidytext")
nrc <- get_sentiments("nrc")
library(dplyr)
library(magrittr)
library(tidytext)
library(tidyr)
library(ggplot2)
nrc <- get_sentiments("nrc")
textdata::lexicon_nrc(delete = TRUE)
options(timeout=100000)
nrc <- get_sentiments("nrc")
table(nrc$sentiment)
g <- gutenberg_works()
library(gutenbergr)
library(dplyr)
library(magrittr)
library(tidytext)
library(tidyr)
library(ggplot2)
g <- gutenberg_works()
id <- c(83, 103, 164, 1268)
verne <- gutenberg_download(id)
books <- g[g$gutenberg_id %in% id, c("gutenberg_id","title")]
verne %<>% left_join(books) %>%
mutate(gutenberg_id = NULL)
verne_books <- verne %>%
group_by(title) %>%
mutate(linenumber = row_number()) %>%
ungroup() %>%
unnest_tokens(word, text)
pos_neg <- verne_books %>%
inner_join(nrc) %>%
filter(sentiment %in% c("positive", "negative")) %>%
group_by(sentiment) %>%
count(word, sort = T) %>%
top_n(10, n) %>%
ungroup() %>%
mutate(word = reorder(word, n))
ggplot(pos_neg) + geom_col(aes(word, n, fill = sentiment)) +
coord_flip() +
facet_wrap( ~ sentiment, scales = "free")
nrc_class <- verne_books %>%
filter(title == books[["title"]][2]) %>%
inner_join(nrc) %>%
filter(!(sentiment %in% c("positive", "negative"))) %>%
group_by(sentiment) %>%
count(word, sort = T) %>%
top_n(10, n) %>%
ungroup() %>%
mutate(word = reorder(word, n))
ggplot(nrc_class) + geom_col(aes(word, n, fill = sentiment), show.legend = FALSE) +
coord_flip() +
facet_wrap(~sentiment, nrow = 3, scales = "free")
verne_senti_bing <- verne_books %>%
inner_join(get_sentiments("bing")) %>%
count(title, index = linenumber %/% 80, sentiment)
verne_senti_bing
verne_senti_bing %<>%
spread(sentiment, n, fill = 0)
verne_senti_bing
ggplot(verne_senti_bing, aes(index, sentiment, fill = title)) +
geom_col(show.legend = FALSE) +
facet_wrap( ~ title, ncol = 2, scales = "free_x")
verne_senti_bing %<>%
mutate(sentiment = positive - negative)
ggplot(verne_senti_bing, aes(index, sentiment, fill = title)) +
geom_col(show.legend = FALSE) +
facet_wrap( ~ title, ncol = 2, scales = "free_x")
emo <- as_tibble(read.csv("http://www.fizyka.pw.edu.pl/~julas/TEXT/lab/Ratings_Warriner_et_al.csv", stringsAsFactors = F))
emo
emo <- as_tibble(read.csv("http://www.fizyka.pw.edu.pl/~julas/TEXT/lab/Ratings_Warriner_et_al.csv", stringsAsFactors = F))
emo <- as_tibble(read.csv("http://www.fizyka.pw.edu.pl/~julas/TEXT/lab/Ratings_Warriner_et_al.csv", stringsAsFactors = F))
library(reshape2)
install.packages("reshape2")
library(reshape2)
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
verne_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "darkgreen"),
max.words = 100)
setwd("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/lab6")
setwd("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/lab7")
library(tidyverse)
library(tidytext)
parts_of_speech
g <- grid.arrange(g1,g3,g2,g4, ncol=2, nrow=2, left = "TF-IDF/TF", top = "cross/cosinus")
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad2/zad2.R")
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/lab7/lab7.R")
parts_of_speech
parts_of_speech %>%
count(word, sort = T)
parts_of_speech %>%
count(word, sort = T)
pos <- parts_of_speech %>%
count(pos, sort = T) %>%
mutate(nn = n / sum(n))
pos
ggplot(pos) +
geom_bar(aes(x = reorder(pos, -nn), nn, fill = reorder(pos, nn)), stat="identity") +
coord_flip() + theme(legend.position = "none") +
labs(y = "fraction", x = "POS")
library(gutenbergr)
verne <- gutenberg_download(83)
verne_book <- verne %>%
unnest_tokens(word, text) %>%
left_join(parts_of_speech) %>%
count(pos, sort = T) %>%
mutate(nn = n / sum(n))
verne_book
ggplot(verne_book) +
geom_bar(aes(x = reorder(pos, -nn), nn, fill = reorder(pos, nn)), stat="identity") +
coord_flip() + theme(legend.position = "none") +
labs(y = "fraction", x = "POS")
verne_join <- verne_book %>%
full_join(pos, by = c("pos"))
verne_join
theme_set(theme_bw())
verne_join %>%
mutate(diff = log10(nn.x / nn.y)) %>%
ggplot() + geom_bar(aes(x = reorder(pos, diff), diff, fill = diff > 0), color = "grey", stat="identity") +
scale_fill_manual(values = c("blue", "red")) +
coord_flip() +
theme(legend.position = "none") +
labs(title="Cos", x = "POS", y = expression(paste(log[10]," ",bgroup("(",frac(n[Verne],n[POS]),")"))))
g <- gutenberg_works()
ind <- c(16457, 18857, 1268, 2488, 2083)
v <- gutenberg_download(ind)
books <- g[g$gutenberg_id %in% ind,c("gutenberg_id","title")]
verne <- v %>% left_join(books) %>%
mutate(gutenberg_id = NULL)
verne_bigrams <- verne %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigrams_sep <- verne_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams_flt <- bigrams_sep %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
bigrams_flt
bigrams_flt %>%
filter(word2 == "land") %>%
left_join(parts_of_speech, by = c("word1" = "word")) %>%
filter(pos == "Adjective") %>%
count(title, word1) %>%
group_by(title) %>%
top_n(10) %>%
ungroup() %>%
mutate(word1 = reorder(word1, n), n) %>%
ggplot() +
geom_bar(aes(x = reorder(word1, n), n), stat="identity") +
coord_flip() +
facet_wrap(~title)
nrc <- get_sentiments("nrc")
bigrams_flt %>%
filter(word2 == "land") %>%
left_join(parts_of_speech, by = c("word1" = "word")) %>%
filter(pos == "Adjective") %>%
count(title, word1) %>%
inner_join(nrc, by = c("word1" = "word")) %>%
filter(sentiment %in% c("positive", "negative")) %>%
group_by(title) %>%
top_n(10) %>%
ungroup() %>%
mutate(word1 = reorder(word1, n)) %>%
ggplot() +
geom_bar(aes(x = word1, n, fill = sentiment), stat="identity") +
coord_flip() +
facet_wrap(~title)
rm(list = ls())
library(wordnet)
install.packages("wordnet")
library(wordnet)
library(igraph)
setDict("./wordnet/dict/")
